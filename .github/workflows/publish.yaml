name: Build, Publish, and Release

on:
  workflow_dispatch:

jobs:
  build_publish_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      working-directory: ./modules

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '21'

      - name: Set up git user
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Extract version from pom.xml without -SNAPSHOT
      - name: Get the version
        working-directory: ${{ env.working-directory }}
        run: echo "PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec | sed 's/-SNAPSHOT//')" >> $GITHUB_ENV

      # Update version to release (remove -SNAPSHOT)
      - name: Update version to release
        working-directory: ${{ env.working-directory }}
        run: |
          mvn versions:set -DnewVersion=${{ env.PROJECT_VERSION }} -DgenerateBackupPoms=false
          git commit -am "Prepare release ${{ env.PROJECT_VERSION }}"
          git tag "pre-release-${{ env.PROJECT_VERSION }}"
          git push origin "pre-release-${{ env.PROJECT_VERSION }}"

      # Build the code
      - name: Build with Maven
        working-directory: ${{ env.working-directory }}
        run: mvn clean install

      # Publish to GitHub Package Repository
      - name: Publish to GitHub Package Repository
        working-directory: ${{ env.working-directory }}
        run: mvn deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Tag the new version
      - name: Create and Push Tag
        working-directory: ${{ env.working-directory }}
        run: |
          git tag ${{ env.PROJECT_VERSION }}
          git push origin ${{ env.PROJECT_VERSION }}

      # Extract changelog for current version
      - name: Extract changelog for current version
        id: extract-changelog
        run: |
          CHANGELOG=$(sed -n "/^## \[${{ env.PROJECT_VERSION }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          echo "$CHANGELOG" > version_changelog.md

      # Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: v${{ env.PROJECT_VERSION }}
          body_path: version_changelog.md
          draft: false
          prerelease: false

      # Bump to the next development version
      - name: Bump to next development version
        working-directory: ${{ env.working-directory }}
        run: |
          NEW_VERSION=$(echo ${{ env.PROJECT_VERSION }} | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')-SNAPSHOT
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          git commit -am "Start next development cycle with $NEW_VERSION"
          git tag "post-release-${{ env.PROJECT_VERSION }}"
          git push
          git push --tags
