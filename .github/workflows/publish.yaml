name: CI/CD

on:
  workflow_dispatch:
    # only allowed for main branch
    branches:
      - main
  push:
    # only allowed for main branch
    branches:
      - main

jobs:
  ci:
    name: CI
    uses: giovannymassuia/minimalist-java/.github/workflows/ci.yaml@main

  build_publish_release:
    name: Publish and Release
    environment: production
    needs: [ ci ]
    # only if the branch is main and the commit message contains <release:patch|minor|major>
    #    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '<release:')
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
      working-directory: ./modules

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '21'

      # Set up git user
      - name: Set up git user
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Extract version from pom.xml without -SNAPSHOT
      - name: Get the version
        working-directory: ${{ env.working-directory }}
        run: echo "PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec | sed 's/-SNAPSHOT//')" >> $GITHUB_ENV

      # Update version to release (remove -SNAPSHOT)
      - name: Update version to release
        working-directory: ${{ env.working-directory }}
        run: |
          mvn versions:set -DnewVersion=${{ env.PROJECT_VERSION }} -DgenerateBackupPoms=false
          cd ../docs
          jq '.version = "${{ env.PROJECT_VERSION }}"' current_version.json > current_version.json.temp && mv current_version.json.temp current_version.json
          rm -f current_version.json.temp
          cd ../modules
          git commit -am "ðŸ“¦ release: prepare release ${{ env.PROJECT_VERSION }}"
          git tag "release-${{ env.PROJECT_VERSION }}"
          git push origin "release-${{ env.PROJECT_VERSION }}"

      # Publish to GitHub Package Repository
      - name: Publish to GitHub Package Repository
        working-directory: ${{ env.working-directory }}
        run: mvn --no-transfer-progress --batch-mode deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Tag the new version
      - name: Create and Push Tag
        working-directory: ${{ env.working-directory }}
        run: |
          git tag ${{ env.PROJECT_VERSION }}
          git push origin ${{ env.PROJECT_VERSION }}

      # Extract changelog for current version
      - name: Extract changelog for current version
        id: extract-changelog
        run: |
          CHANGELOG=$(sed -n "/^## \[${{ env.PROJECT_VERSION }}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          echo "$CHANGELOG" > version_changelog.md

      # Create GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PROJECT_VERSION }}
          release_name: v${{ env.PROJECT_VERSION }}
          body_path: version_changelog.md
          draft: false
          prerelease: false

      # Bump to the next development version
      - name: Bump to next development version
        working-directory: ${{ env.working-directory }}
        run: |
          BASE_VERSION=$(echo ${{ env.PROJECT_VERSION }} | cut -d '-' -f 1)
          LABEL=$(echo ${{ env.PROJECT_VERSION }} | cut -s -d '-' -f 2)
          PATCH_VERSION=$(echo $BASE_VERSION | awk -F. '{print $3}')
          NEW_PATCH_VERSION=$((PATCH_VERSION+1))
          NEW_BASE_VERSION=$(echo $BASE_VERSION | awk -v n=$NEW_PATCH_VERSION -F. '{print $1"."$2"."n}')
          NEW_VERSION=$NEW_BASE_VERSION
          
          if [[ ! -z $LABEL ]]; then
            NEW_VERSION="$NEW_VERSION-$LABEL"
          fi
          
          NEW_VERSION="$NEW_VERSION-SNAPSHOT"
          
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
          git commit -am "ðŸ“¦ release: next development version $NEW_VERSION"
          git tag "post-release-${{ env.PROJECT_VERSION }}"
          git push
          git push --tags
